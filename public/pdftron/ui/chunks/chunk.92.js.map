{"version":3,"sources":["webpack:///./src/ui/src/helpers/capitalize.js","webpack:///./src/ui/src/helpers/performClipboardActionOnCells.js","webpack:///./src/ui/src/components/ModularComponents/PresetButton/buttons/SheetEditor/CopyPasteCutButton.js"],"names":["capitalize","str","charAt","toUpperCase","slice","performClipboardActionOnCells","actionType","clipboard","core","getDocumentViewer","getDocument","getSpreadsheetEditorDocument","getClipboard","copy","paste","cut","propTypes","PropTypes","oneOf","Object","values","CELL_ACTION_OPTIONS","isRequired","isFlyoutItem","bool","dataElement","string","style","object","className","img","title","CopyPasteCutButton","forwardRef","props","ref","buttonSelector","concat","_props$dataElement","menuItems","_props$img","icon","_props$title","isEnabled","useSelector","state","selectorName","selector","selectors","handleClick","React","createElement","FlyoutItemContainer","_extends","onClick","additionalClass","disabled","ActionButton","key","isActive","ariaPressed","displayName"],"mappings":"yLAOeA,G,MAPI,SAACC,GAClB,MAAmB,iBAARA,EACF,GAEFA,EAAIC,OAAO,GAAGC,cAAgBF,EAAIG,MAAM,K,qBCoBlCC,MAtBf,SAAuCC,GACrC,GAAKA,EAAL,CAIA,IAAMC,EAAYC,IAAKC,oBAAoBC,cAAcC,+BAA+BC,eAExF,OAAQN,GACN,IAAK,OACHC,EAAUM,OACV,MACF,IAAK,QACHN,EAAUO,QACV,MACF,IAAK,MACHP,EAAUQ,S,uNCNhB,IAAMC,EAAY,CAChBV,WAAYW,IAAUC,MAAMC,OAAOC,OAAOC,MAAsBC,WAChEC,aAAcN,IAAUO,KACxBC,YAAaR,IAAUS,OACvBC,MAAOV,IAAUW,OACjBC,UAAWZ,IAAUS,OACrBI,IAAKb,IAAUS,OACfK,MAAOd,IAAUS,QAGbM,EAAqBC,sBAAW,SAACC,EAAOC,GAC5C,IAAQZ,EAA+CW,EAA/CX,aAAcjB,EAAiC4B,EAAjC5B,WAAYqB,EAAqBO,EAArBP,MAAOE,EAAcK,EAAdL,UACnCO,EAAiB,OAAHC,OAAUrC,EAAWM,IACzCgC,EAIIJ,EAHFT,mBAAW,IAAAa,EAAGC,IAAUH,GAAgBX,YAAWa,EAAAE,EAGjDN,EAFFJ,IAAKW,OAAI,IAAAD,EAAGD,IAAUH,GAAgBK,KAAID,EAAAE,EAExCR,EADFH,aAAK,IAAAW,EAAGH,IAAUH,GAAgBL,MAAKW,EAGnCC,EAAYC,aAAY,SAACC,GAC7B,IAAMC,EAAe,SAAHT,OAAYrC,EAAWM,IACnCyC,EAAWC,IAAUF,GAC3B,QAAKC,GAGEA,EAASF,MAGZI,EAAc,WAClB5C,EAA8BC,IAGhC,OACEiB,EACE2B,IAAAC,cAACC,IAAmBC,EAAA,GACdnB,EAAK,CACTC,IAAKA,EACLmB,QAASL,EACTM,gBAAuC,GACvCC,UAAWb,KAGXO,IAAAC,cAACM,IAAY,CACXD,UAAWb,EACXe,IAAKpD,EACLqD,UA3BS,EA4BTL,QAASL,EACTxB,YAAaA,EACbM,MAAOA,EACPD,IAAKW,EACLmB,aAhCS,EAiCTjC,MAAOA,EACPE,UAAWA,OAMrBG,EAAmBhB,UAAYA,EAC/BgB,EAAmB6B,YAAc,qBAElB7B","file":"chunks/chunk.92.js","sourcesContent":["const capitalize = (str) => {\n  if (typeof str !== 'string') {\n    return '';\n  }\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\nexport default capitalize;\n","import core from 'core';\n\nfunction performClipboardActionOnCells(actionType) {\n  if (!actionType) {\n    return;\n  }\n\n  const clipboard = core.getDocumentViewer().getDocument().getSpreadsheetEditorDocument().getClipboard();\n\n  switch (actionType) {\n    case 'copy':\n      clipboard.copy();\n      break;\n    case 'paste':\n      clipboard.paste();\n      break;\n    case 'cut':\n      clipboard.cut();\n      break;\n    default:\n      break;\n  }\n}\n\nexport default performClipboardActionOnCells;","import React, { forwardRef } from 'react';\nimport ActionButton from 'components/ActionButton';\nimport PropTypes from 'prop-types';\nimport FlyoutItemContainer from '../../../FlyoutItemContainer';\nimport { menuItems } from '../../../Helpers/menuItems';\nimport { CELL_ACTION_OPTIONS } from 'constants/spreadsheetEditor';\nimport capitalize from 'helpers/capitalize';\nimport { useSelector } from 'react-redux';\nimport selectors from 'selectors';\nimport performClipboardActionOnCells from 'src/helpers/performClipboardActionOnCells';\n\nconst propTypes = {\n  actionType: PropTypes.oneOf(Object.values(CELL_ACTION_OPTIONS)).isRequired,\n  isFlyoutItem: PropTypes.bool,\n  dataElement: PropTypes.string,\n  style: PropTypes.object,\n  className: PropTypes.string,\n  img: PropTypes.string,\n  title: PropTypes.string,\n};\n\nconst CopyPasteCutButton = forwardRef((props, ref) => {\n  const { isFlyoutItem, actionType, style, className } = props;\n  const buttonSelector = `cell${capitalize(actionType)}`;\n  const {\n    dataElement = menuItems[buttonSelector].dataElement,\n    img: icon = menuItems[buttonSelector].icon,\n    title = menuItems[buttonSelector].title,\n  } = props;\n  const isActive = false;\n  const isEnabled = useSelector((state) => {\n    const selectorName = `getCan${capitalize(actionType)}`;\n    const selector = selectors[selectorName];\n    if (!selector) {\n      return false;\n    }\n    return selector(state);\n  });\n\n  const handleClick = () => {\n    performClipboardActionOnCells(actionType);\n  };\n\n  return (\n    isFlyoutItem ?\n      <FlyoutItemContainer\n        {...props}\n        ref={ref}\n        onClick={handleClick}\n        additionalClass={isActive ? 'active' : ''}\n        disabled={!isEnabled}\n      />\n      : (\n        <ActionButton\n          disabled={!isEnabled}\n          key={actionType}\n          isActive={isActive}\n          onClick={handleClick}\n          dataElement={dataElement}\n          title={title}\n          img={icon}\n          ariaPressed={isActive}\n          style={style}\n          className={className}\n        />\n      )\n  );\n});\n\nCopyPasteCutButton.propTypes = propTypes;\nCopyPasteCutButton.displayName = 'CopyPasteCutButton';\n\nexport default CopyPasteCutButton;"],"sourceRoot":""}