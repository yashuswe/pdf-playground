{"version":3,"sources":["webpack:///./src/ui/src/helpers/mergeCellRange.js","webpack:///./src/ui/src/components/ModularComponents/PresetButton/buttons/SheetEditor/MergeToggleButton.js"],"names":["mergeCellRange","merge","core","getDocumentViewer","getSpreadsheetEditorManager","setSelectedCellsStyle","propTypes","type","PropTypes","string","isFlyoutItem","bool","dataElement","style","object","className","img","title","MergeToggleButton","forwardRef","props","ref","isMerged","useSelector","state","selectors","getIsCellRangeMerged","isCellRangeMergeDisabled","getIsSingleCell","menuItem","menuItems","_props$dataElement","_props$img","icon","_props$title","handleClick","React","createElement","FlyoutItemContainer","_extends","onClick","additionalClass","disabled","ActionButton","key","isActive","ariaPressed","displayName"],"mappings":"gMASeA,MAPf,SAAwBC,GACWC,IAAKC,oBAAoBC,8BACjCC,sBAAsB,CAC7CJ,W,uNCIJ,IAAMK,EAAY,CAChBC,KAAMC,IAAUC,OAChBC,aAAcF,IAAUG,KACxBC,YAAaJ,IAAUC,OACvBI,MAAOL,IAAUM,OACjBC,UAAWP,IAAUC,OACrBO,IAAKR,IAAUC,OACfQ,MAAOT,IAAUC,QAGbS,EAAoBC,sBAAW,SAACC,EAAOC,GAC3C,IAAMC,EAAWC,aAAY,SAACC,GAAK,OAAKC,IAAUC,qBAAqBF,MACjEG,EAA2BJ,aAAY,SAACC,GAAK,OAAKC,IAAUG,gBAAgBJ,MAC5EK,EAAWC,IAAUR,EAAW,oBAAsB,mBAG1DZ,EAOEU,EAPFV,aACAH,EAMEa,EANFb,KACAM,EAKEO,EALFP,MACAE,EAIEK,EAJFL,UAASgB,EAIPX,EAHFR,mBAAW,IAAAmB,EAAGF,EAASjB,YAAWmB,EAAAC,EAGhCZ,EAFFJ,IAAKiB,OAAI,IAAAD,EAAGH,EAASI,KAAID,EAAAE,EAEvBd,EADFH,aAAK,IAAAiB,EAAGL,EAASZ,MAAKiB,EAGlBC,EAAc,WAClBnC,GAAgBsB,IAGlB,OACEZ,EACE0B,IAAAC,cAACC,IAAmBC,EAAA,GACdnB,EAAK,CACTC,IAAKA,EACLmB,QAASL,EACTM,gBAAiBnB,EAAW,SAAW,GACvCoB,SAAUf,KAGVS,IAAAC,cAACM,IAAY,CACXC,IAAKrC,EACLsC,SAAUvB,EACVkB,QAASL,EACTvB,YAAaA,EACbK,MAAOA,EACPD,IAAKiB,EACLa,YAAaxB,EACbT,MAAOA,EACPE,UAAWA,EACX2B,SAAUf,OAMpBT,EAAkBZ,UAAYA,EAC9BY,EAAkB6B,YAAc,oBAEjB7B","file":"chunks/chunk.93.js","sourcesContent":["import core from 'core';\n\nfunction mergeCellRange(merge) {\n  const spreadsheetEditorManager = core.getDocumentViewer().getSpreadsheetEditorManager();\n  spreadsheetEditorManager.setSelectedCellsStyle({\n    merge,\n  });\n}\n\nexport default mergeCellRange;","import React, { forwardRef } from 'react';\nimport ActionButton from 'components/ActionButton';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport selectors from 'selectors';\nimport FlyoutItemContainer from '../../../FlyoutItemContainer';\nimport { menuItems } from '../../../Helpers/menuItems';\nimport mergeCellRange from 'src/helpers/mergeCellRange';\n\nconst propTypes = {\n  type: PropTypes.string,\n  isFlyoutItem: PropTypes.bool,\n  dataElement: PropTypes.string,\n  style: PropTypes.object,\n  className: PropTypes.string,\n  img: PropTypes.string,\n  title: PropTypes.string,\n};\n\nconst MergeToggleButton = forwardRef((props, ref) => {\n  const isMerged = useSelector((state) => selectors.getIsCellRangeMerged(state));\n  const isCellRangeMergeDisabled = useSelector((state) => selectors.getIsSingleCell(state));\n  const menuItem = menuItems[isMerged ? 'cellUnmergeToggle' : 'cellMergeToggle'];\n\n  const {\n    isFlyoutItem,\n    type,\n    style,\n    className,\n    dataElement = menuItem.dataElement,\n    img: icon = menuItem.icon,\n    title = menuItem.title,\n  } = props;\n\n  const handleClick = () => {\n    mergeCellRange(!isMerged);\n  };\n\n  return (\n    isFlyoutItem ?\n      <FlyoutItemContainer\n        {...props}\n        ref={ref}\n        onClick={handleClick}\n        additionalClass={isMerged ? 'active' : ''}\n        disabled={isCellRangeMergeDisabled}\n      />\n      : (\n        <ActionButton\n          key={type}\n          isActive={isMerged}\n          onClick={handleClick}\n          dataElement={dataElement}\n          title={title}\n          img={icon}\n          ariaPressed={isMerged}\n          style={style}\n          className={className}\n          disabled={isCellRangeMergeDisabled}\n        />\n      )\n  );\n});\n\nMergeToggleButton.propTypes = propTypes;\nMergeToggleButton.displayName = 'MergeToggleButton';\n\nexport default MergeToggleButton;"],"sourceRoot":""}